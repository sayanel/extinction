"""
@author: Alexis Oblet
Module making the bridge between Extinction json words language and Microsoft Translator API.
"""

import json
import requests
import urllib
import codecs
import os.path as op
import collections
import datetime

from src.ui.languageTreeMVC import LanguageTreeMVC


def getAccessToken(clientID, clientSecret):
    """
    For client_id and client_secret ask to Alexis. This must be secret : words translation are limited by Microsoft.
    :param clientID: str
    :param clientSecret: str
    :return: Access token needed to request Translator API according client_id and client_secret.
    """
    urlOptions = {
        'client_id': clientID,
        'client_secret': clientSecret,
        'scope': 'http://api.microsofttranslator.com',
        'grant_type': 'client_credentials'
    }

    oauth_url = 'https://datamarket.accesscontrol.windows.net/v2/OAuth2-13'
    oauth_data = json.loads(requests.post(oauth_url, data=urllib.urlencode(urlOptions)).content)
    return oauth_data['access_token']


def translateArray(textsArray, languageFrom, languageTo, accessToken):
    """
    Request Microsoft Translator API to translate textsArray

    :param textsArray: list of texts
    :param languageFrom: code language from (ex: 'en')
    :param languageTo: code language to (ex: 'fr')
    :param accessToken: token needed to request microsoft
    :return: translated texts into list: same order as texts from textsArray
    """

    translation_args = {
        'texts': '[' + ', '.join(['"' + str(i) + '"' for i in textsArray]) + ']',
        'from': languageFrom,
        'to': languageTo
    }

    headers = {'Authorization': 'Bearer ' + accessToken}
    translation_url = 'http://api.microsofttranslator.com/V2/Ajax.svc/TranslateArray?'
    translation_result = requests.get(translation_url+urllib.urlencode(translation_args), headers=headers)
    translation = translation_result.content

    if translation.startswith(codecs.BOM_UTF8):
        translation = translation[3:].decode("utf-8")

    translation = json.loads(translation, object_pairs_hook=collections.OrderedDict)
    return [x["TranslatedText"] for x in translation]


def translate(jsonPathBase, accessToken):
    """
    Process the translation process from a json file
    :param jsonPathBase: json path language file
    :param accessToken: microsoft token
    """
    with codecs.open(jsonPathBase, 'r', 'utf-8') as jsFile:
        jsData = json.load(jsFile, object_pairs_hook=collections.OrderedDict)

    _from = jsData[LanguageTreeMVC.KEY_CODE]
    targets = jsData[LanguageTreeMVC.KEY_TARGETS]

    # This list contains all the texts to translate: the order MATTER when inserting into json at the end
    wordsToTranslate = getWordsToTranslate(jsData[LanguageTreeMVC.KEY_ELEMENTS])

    # 2000 texts are max to send for one request: split if len(wordsToTranslate) > 2000
    wordsArrayList = [ wordsToTranslate[x:x+2000] for x in range(0, len(wordsToTranslate), 2000)]
    folderSave = op.dirname(jsonPathBase)

    print ""
    print "Begin process translation from " + _from + " ..."
    print ""

    for to in targets:
        jsData[LanguageTreeMVC.KEY_CODE] = to
        fileSave = op.join(folderSave, to + ".json")

        translated = []
        for subWordsArray in wordsArrayList:
            translated.extend(translateArray(subWordsArray, _from, to, accessToken))

        # Write to JSON
        timeGenerated = str(datetime.date.today()) + " " + datetime.datetime.now().strftime("%H-%M-%S")
        translatedWordsToJson(jsData[LanguageTreeMVC.KEY_ELEMENTS], translated)
        assert len(translated) == 0

        jsData[LanguageTreeMVC.KEY_AUTOGENERATED_MESSAGE] = "File generated by ELTK with Microsoft Translator API. Code " + to + ". "
        jsData[LanguageTreeMVC.KEY_AUTOGENERATED_MESSAGE] +="Generated at time: " + timeGenerated
        jsData[LanguageTreeMVC.KEY_COMMENTS] = ""

        # Save translated words
        with codecs.open(fileSave, 'w', 'utf-8') as out:
            json.dump(jsData, out, indent=4, ensure_ascii=False, encoding='utf-8')
            print "Writing " + fileSave + " ..."


def translatedWordsToJson(jsData, translatedWords):
    """
    Warning: translatedWordsToJson and getWordsToTranslate are strongly linked.
    Indeed the order of words inside translatedWords is really important.
    Microsoft receive a list of texts and return the translated texts in same order.
    So json tree -> texts array

    From translatedWords list, assign to the right key each elements
    :param jsData: dict
    :param translatedWords: list
    """
    for idx, val in sorted(jsData.iteritems()):
        if isinstance(val, dict):
            translatedWordsToJson(val, translatedWords)
        else:
            jsData[idx] = translatedWords.pop(0)


def getWordsToTranslate(jsData):
    """
    :param jsData: dict
    :return: texts to translate
    """
    words = []
    for idx, val in sorted(jsData.iteritems()):
        if isinstance(val, dict):
            words += getWordsToTranslate(val)
        else:
            words.append(val)
    return words


